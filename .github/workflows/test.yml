name: Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DOTNET_ROOT: /usr/share/dotnet

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Cache R installation and packages
        uses: actions/cache@v4
        with:
          path: |
            /usr/lib/R
            /usr/local/lib/R
            /usr/share/R
          key: ${{ runner.os }}-r-complete-4.3.3-v1
          restore-keys: |
            ${{ runner.os }}-r-complete-4.3.3-
            ${{ runner.os }}-r-complete-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Go for gopls
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Cache Lua language server
        uses: actions/cache@v4
        with:
          path: /opt/lua-language-server
          key: ${{ runner.os }}-lua-language-server-v1
          restore-keys: |
            ${{ runner.os }}-lua-language-server-

      - name: Install lua-language-server
        run: |
          # Install Lua dependencies (these are small and quick)
          sudo apt-get install -y lua5.4 lua5.4-dev
          
          # Check if lua-language-server is already installed (from cache)
          if [ ! -f /opt/lua-language-server/bin/lua-language-server ]; then
            echo "Installing Lua language server..."
            # Get the latest release info and extract the correct download URL
            LATEST_URL=$(curl -s https://api.github.com/repos/LuaLS/lua-language-server/releases/latest | grep "browser_download_url.*linux-x64.tar.gz" | cut -d '"' -f 4)
            wget -O lua-language-server.tar.gz "$LATEST_URL"
            sudo mkdir -p /opt/lua-language-server
            sudo tar -xzf lua-language-server.tar.gz -C /opt/lua-language-server
          else
            echo "Lua language server found in cache, skipping installation"
          fi
          
          # Ensure symlink exists
          sudo ln -sf /opt/lua-language-server/bin/lua-language-server /usr/local/bin/lua-language-server

      - name: Install shellcheck
        run: sudo apt-get install -y shellcheck

      - name: Setup R and R languageserver
        run: |
          # Check if R is already installed (from cache)
          if [ ! -f /usr/lib/R/bin/R ]; then
            echo "Installing R..."
            sudo apt-get update
            sudo apt-get install -y r-base r-base-dev
            
            # Install system dependencies for R packages
            sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev
          else
            echo "R found in cache, skipping installation"
          fi
          
          # Ensure R is in PATH
          export PATH="/usr/lib/R/bin:$PATH"
          
          # Check if languageserver package is installed
          if [ ! -d /usr/local/lib/R/site-library/languageserver ]; then
            echo "Installing R languageserver package..."
            sudo R --slave -e 'install.packages("languageserver", repos="https://cran.rstudio.com/", dependencies=TRUE, Ncpus=2)'
          else
            echo "R languageserver found in cache, skipping installation"
          fi
          
          # Verify R and languageserver installation
          R --version
          R --slave -e 'packageVersion("languageserver")'

      - name: Cache .NET SDK and OmniSharp
        uses: actions/cache@v4
        with:
          path: |
            /usr/share/dotnet
            ~/.omnisharp
          key: ${{ runner.os }}-dotnet-omnisharp-8.0-v1
          restore-keys: |
            ${{ runner.os }}-dotnet-omnisharp-8.0-
            ${{ runner.os }}-dotnet-omnisharp-

      - name: Setup .NET SDK and OmniSharp
        run: |
          # Check if .NET SDK is already installed (from cache)
          if [ ! -f /usr/share/dotnet/dotnet ]; then
            echo "Installing .NET SDK..."
            wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
            sudo dpkg -i packages-microsoft-prod.deb
            sudo apt-get update
            sudo apt-get install -y dotnet-sdk-8.0
          else
            echo ".NET SDK found in cache, skipping installation"
          fi
          
          # Ensure .NET is in PATH
          export PATH="/usr/share/dotnet:$PATH"
          
          # Verify .NET installation
          dotnet --version
          
          # Check if OmniSharp is already installed (from cache)
          if [ ! -f ~/.omnisharp/OmniSharp ]; then
            echo "Installing OmniSharp..."
            mkdir -p ~/.omnisharp
            wget -O omnisharp.tar.gz https://github.com/OmniSharp/omnisharp-roslyn/releases/latest/download/omnisharp-linux-x64-net6.0.tar.gz
            tar -xzf omnisharp.tar.gz -C ~/.omnisharp
          else
            echo "OmniSharp found in cache, skipping installation"
          fi
          
          # Ensure symlink exists
          sudo ln -sf ~/.omnisharp/OmniSharp /usr/local/bin/omnisharp
          
          # Verify OmniSharp installation
          omnisharp --help

      - name: Run type checking
        run: bun run typecheck

      - name: Build CLI
        run: bun run build

      - name: Make CLI executable
        run: chmod +x ./cli-lsp-client

      - name: Verify CLI works
        run: ./cli-lsp-client status

      - name: Verify R language server
        run: |
          # Test that R and languageserver are working
          R --slave -e 'library(languageserver); cat("R languageserver loaded successfully\n")'

      - name: Verify C# language server
        run: |
          # Test that OmniSharp is working with DOTNET_ROOT
          omnisharp --help | head -5

      - name: Run tests
        run: |
          # Run all tests except java tests (which require more complex setup)
          find tests -name "*.test.ts" -not -path "*/java/*" | xargs bun test --timeout 30000
