name: Test

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DOTNET_ROOT: ${{ github.workspace }}/.dotnet
      DOTNET_INSTALL_DIR: ${{ github.workspace }}/.dotnet
      R_LIBS_USER: ${{ github.workspace }}/.R/library

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Create user directories for caching
        run: |
          mkdir -p ${{ github.workspace }}/.dotnet
          mkdir -p ${{ github.workspace }}/.R/library
          mkdir -p ${{ github.workspace }}/.local/bin

      - name: Cache R packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.R/library
            ~/.cache/R
          key: ${{ runner.os }}-r-packages-4.3.3-v2
          restore-keys: |
            ${{ runner.os }}-r-packages-4.3.3-
            ${{ runner.os }}-r-packages-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Go for gopls
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Cache Lua language server
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.local/lua-language-server
          key: ${{ runner.os }}-lua-language-server-v2
          restore-keys: |
            ${{ runner.os }}-lua-language-server-

      - name: Install lua-language-server
        run: |
          # Install Lua dependencies (these are small and quick)
          sudo apt-get install -y lua5.4 lua5.4-dev
          
          # Check if lua-language-server is already installed (from cache)
          if [ ! -f "${{ github.workspace }}/.local/lua-language-server/bin/lua-language-server" ]; then
            echo "Installing Lua language server to user directory..."
            # Get the latest release info with error handling
            LATEST_URL=$(curl -s https://api.github.com/repos/LuaLS/lua-language-server/releases/latest | jq -r '.assets[] | select(.name | contains("linux-x64") and (contains("musl") | not)) | .browser_download_url' | head -1)
            if [ -z "$LATEST_URL" ] || [ "$LATEST_URL" = "null" ]; then
              echo "Failed to get latest release URL, using fallback"
              LATEST_URL="https://github.com/LuaLS/lua-language-server/releases/download/3.9.3/lua-language-server-3.9.3-linux-x64.tar.gz"
            fi
            echo "Downloading from: $LATEST_URL"
            wget -O lua-language-server.tar.gz "$LATEST_URL"
            mkdir -p "${{ github.workspace }}/.local/lua-language-server"
            tar -xzf lua-language-server.tar.gz -C "${{ github.workspace }}/.local/lua-language-server"
          else
            echo "Lua language server found in cache, skipping installation"
          fi
          
          # Create wrapper script in local bin
          mkdir -p "${{ github.workspace }}/.local/bin"
          cat > "${{ github.workspace }}/.local/bin/lua-language-server" << 'EOF'
          #!/bin/bash
          "${{ github.workspace }}/.local/lua-language-server/bin/lua-language-server" "$@"
          EOF
          chmod +x "${{ github.workspace }}/.local/bin/lua-language-server"
          
          # Add to PATH for all subsequent steps
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH

      - name: Install shellcheck
        run: sudo apt-get install -y shellcheck

      - name: Setup R and R languageserver
        run: |
          # Install R system packages (always needed)
          echo "Installing R system packages..."
          sudo apt-get update
          sudo apt-get install -y r-base r-base-dev libcurl4-openssl-dev libssl-dev libxml2-dev
          
          # Check if languageserver package is installed in user library
          if [ ! -d "${{ github.workspace }}/.R/library/languageserver" ]; then
            echo "Installing R languageserver package to user library..."
            R --slave -e 'install.packages("languageserver", repos="https://cran.rstudio.com/", lib=Sys.getenv("R_LIBS_USER"), dependencies=TRUE, Ncpus=2)'
          else
            echo "R languageserver found in cache, skipping installation"
          fi
          
          # Verify R and languageserver installation
          R --version
          R --slave -e 'packageVersion("languageserver")'

      - name: Cache .NET SDK and OmniSharp
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.dotnet
            ${{ github.workspace }}/.local/omnisharp
            ${{ github.workspace }}/.local/bin/omnisharp
          key: ${{ runner.os }}-dotnet-omnisharp-8.0-v3
          restore-keys: |
            ${{ runner.os }}-dotnet-omnisharp-8.0-
            ${{ runner.os }}-dotnet-omnisharp-

      - name: Setup .NET SDK and OmniSharp
        run: |
          # Check if .NET SDK is already installed (from cache)
          if [ ! -f "${{ github.workspace }}/.dotnet/dotnet" ]; then
            echo "Installing .NET SDK to user directory..."
            # Download and install .NET to user directory
            wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
            chmod +x dotnet-install.sh
            ./dotnet-install.sh --channel 8.0 --install-dir "${{ github.workspace }}/.dotnet"
          else
            echo ".NET SDK found in cache, skipping installation"
          fi
          
          # Add .NET to PATH for all subsequent steps
          echo "${{ github.workspace }}/.dotnet" >> $GITHUB_PATH
          
          # Verify .NET installation
          dotnet --version
          
          # Check if OmniSharp is already installed (from cache)
          if [ ! -f "${{ github.workspace }}/.local/bin/omnisharp" ]; then
            echo "Installing OmniSharp to user directory..."
            mkdir -p "${{ github.workspace }}/.local/omnisharp"
            wget -O omnisharp.tar.gz https://github.com/OmniSharp/omnisharp-roslyn/releases/latest/download/omnisharp-linux-x64-net6.0.tar.gz
            tar -xzf omnisharp.tar.gz -C "${{ github.workspace }}/.local/omnisharp"
            # Create wrapper script
            cat > "${{ github.workspace }}/.local/bin/omnisharp" << 'EOF'
          #!/bin/bash
          "${{ github.workspace }}/.local/omnisharp/OmniSharp" "$@"
          EOF
            chmod +x "${{ github.workspace }}/.local/bin/omnisharp"
          else
            echo "OmniSharp found in cache, skipping installation"
          fi
          
          # PATH already added by Lua setup, verify OmniSharp installation
          omnisharp --help

      - name: Run type checking
        run: bun run typecheck

      - name: Build CLI
        run: bun run build

      - name: Make CLI executable
        run: chmod +x ./cli-lsp-client

      - name: Verify CLI works
        run: ./cli-lsp-client status

      - name: Verify R language server
        run: |
          # Test that R and languageserver are working
          R --slave -e 'library(languageserver); cat("R languageserver loaded successfully\n")'

      - name: Verify C# language server
        run: |
          # Test that OmniSharp is working (PATH already set globally)
          omnisharp --help | head -5

      - name: Run tests
        run: |
          # Run all tests except java tests (which require more complex setup)
          find tests -name "*.test.ts" -not -path "*/java/*" | xargs bun test --timeout 120000
